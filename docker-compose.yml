services:

  app:  # Application Flask (API)
    build: ./app # Construction à partir du Dockerfile dans ./app
    ports:
      #- "5000:5000" # Port mappé pour accès direct (peut être retiré si accès uniquement via Traefik)
    environment: # Variables d'environnement pour config DB
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: db
    depends_on:
      - db
    labels:
      - "traefik.enable=true"

      # Pour l'API
      - "traefik.http.routers.todo-api.rule=Host(`localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.todo-api.entrypoints=web"
      - "traefik.http.services.todo.loadbalancer.server.port=5000"

      # Pour les métriques
      - "traefik.http.routers.todo-metrics.rule=Host(`localhost`) && Path(`/metrics`)"
      - "traefik.http.routers.todo-metrics.entrypoints=web"
      - "traefik.http.services.todo.loadbalancer.server.port=5000"

    networks:
      - backend  # Communication avec la DB et exporter
      - traefik # Visible pour le reverse proxy

    healthcheck: # Vérification de santé de l'API
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  db: # Base de données PostgreSQL
    image: postgres:17.5
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  traefik: # Reverse Proxy - Traefik
    image: traefik:latest
    command:
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.dashboard.address=:8080"
      - "--api.dashboard=true"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
    networks:
      - traefik


  prometheus: # Prometheus - Monitoring
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring

    healthcheck: # Vérifie que Prometheus répond
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana: # Grafana - Visualisation
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3


  postgres_exporter:   # PostgreSQL Exporter - métriques DB
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - db
    networks:
      - backend
      - monitoring


  node_exporter: # Node Exporter - métriques système
    image: prom/node-exporter
    ports:
      - "9100:9100"
    networks:
      - monitoring

volumes: # Volumes pour persistance
  db_data:

networks: # Réseaux Docker séparés
  backend:
  traefik:
  monitoring:
